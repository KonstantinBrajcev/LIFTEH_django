name: Django CD
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify settings_prod.py exists
        working-directory: ./LIFTEH_project/LIFTEH_project
        run: |
          if [ ! -f "settings_prod.py" ]; then
            echo "::error::settings_prod.py not found in repository!"
            exit 1
          fi
          echo "settings_prod.py found and valid"

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        working-directory: ./LIFTEH_project
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-server.txt

      - name: Copy project to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "LIFTEH_project/"
          target: "${{ secrets.PROJECT_PATH }}"
          rm: true
          overwrite: true

      - name: Prepare server (migrations + static)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Начинаем подготовку сервера"
            cd ${{ secrets.PROJECT_PATH }}/LIFTEH_project
            source ~/myenv/bin/activate
            export DJANGO_SETTINGS_MODULE=LIFTEH_project.settings_prod
            echo "Активирована виртуальная среда"
                
            echo "Установка зависимостей"
            pip install -r requirements-server.txt
  
            echo "Применение миграций"
            python manage.py makemigrations
            python manage.py migrate --no-input
  
            echo "Сбор статических файлов"
            # python manage.py collectstatic --no-input --clear
  
      - name: Restart Gunicorn
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            source ~/myenv/bin/activate
            echo "Виртуальная среда активирована"

            cd ~/www/jelezo.by/LIFTEH_project || exit 1
            echo "Зашли в папку"

            export DJANGO_SETTINGS_MODULE=LIFTEH_project.settings_prod
            echo "Экспортировали настройки"

            PIDS=$(pgrep -f gunicorn)
            MY_PID=$$
            MY_PPID=$(ps -o ppid= -p $$ | tr -d ' ')

            if [ -n "$PIDS" ]; then
              echo "Gunicorn процессы найдены: $PIDS"
              for pid in $PIDS; do
                if [ "$pid" = "$MY_PID" ] || [ "$pid" = "$MY_PPID" ]; then
                  echo "Пропускаем свой PID: $pid"
                  continue
                fi
                echo "Пробуем завершить процесс $pid"
                kill "$pid" 2>/dev/null || echo "Процесс $pid уже завершён"
              done
            else
              echo "Gunicorn не запущен — ничего не делаем"
            fi

            echo "Запускаем Gunicorn в фоне через nohup"
            nohup gunicorn --bind 0.0.0.0:8001 --workers 3 --timeout 120 LIFTEH_project.wsgi:application > gunicorn.log 2>&1 &
            sleep 3

            echo "Проверка запущенных процессов:"
            pgrep -af gunicorn || echo "Gunicorn не запустился"
            echo "Деплой завершён"

      - name: Monitor and restart workers if needed
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Отключаем немедленный выход при ошибках
            set +e
            
            # Активируем окружение
            source ~/myenv/bin/activate
            cd ~/www/jelezo.by/LIFTEH_project || exit 1
            export DJANGO_SETTINGS_MODULE=LIFTEH_project.settings_prod
            
            echo "=== Проверка состояния Gunicorn ==="
            
            # 1. Проверяем наличие master-процесса
            MASTER_PID=$(pgrep -f "gunicorn: master")
            
            if [ -z "$MASTER_PID" ]; then
              echo "Master процесс не найден, запускаем Gunicorn..."
              nohup gunicorn --bind 0.0.0.0:8001 --workers 3 --timeout 120 LIFTEH_project.wsgi:application > gunicorn.log 2>&1 &
              sleep 5
              echo "Gunicorn запущен"
              exit 0
            fi
            
            # 2. Проверяем количество worker'ов
            WORKERS=$(pgrep -f "gunicorn: worker" | wc -l)
            echo "Текущее количество worker'ов: $WORKERS"
            
            if [ "$WORKERS" -lt 3 ]; then
              echo "Недостаточно worker'ов ($WORKERS/3), перезапускаем Gunicorn..."
              
              # Убиваем все процессы gunicorn
              pkill -f "gunicorn" || true
              sleep 2
              
              # Полный перезапуск
              nohup gunicorn --bind 0.0.0.0:8001 --workers 3 --timeout 120 LIFTEH_project.wsgi:application > gunicorn.log 2>&1 &
              sleep 5
              
              # Проверяем результат
              NEW_WORKERS=$(pgrep -f "gunicorn: worker" | wc -l)
              echo "После перезапуска worker'ов: $NEW_WORKERS"
            else
              echo "Все worker'ы работают нормально"
            fi
            
            # Всегда завершаем успешно
            echo "=== Проверка завершена успешно ==="
            exit 0
