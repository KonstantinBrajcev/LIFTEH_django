name: Django CD
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify settings.py exists
        working-directory: ./LIFTEH_project
        run: |
          if [ ! -f "settings.py" ]; then
            echo "::error::settings.py not found in repository!"
            exit 1
          fi
          echo "settings.py found and valid"

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Install dependencies
        working-directory: ./LIFTEH_project
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-server.txt

      - name: Copy project to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "LIFTEH_project/"
          target: "${{ secrets.PROJECT_PATH }}"
          overwrite: true

      - name: Prepare server (migrations + static)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Переходим в директорию проекта
            cd "${{ secrets.PROJECT_PATH }}/LIFTEH_project"
            
            # ПРОВЕРЯЕМ ЧТО МЫ В ПРАВИЛЬНОЙ ДИРЕКТОРИИ
            echo "=== ТЕКУЩАЯ ДИРЕКТОРИЯ ==="
            pwd
            echo "=== СОДЕРЖИМОЕ ДИРЕКТОРИИ ==="
            ls -la
            
            source ~/myenv/bin/activate
            export DJANGO_PRODUCTION=true
            export DJANGO_SETTINGS_MODULE=settings

            # ПРОВЕРЯЕМ СУЩЕСТВОВАНИЕ ФАЙЛОВ
            echo "=== ПРОВЕРКА ФАЙЛОВ ==="
            if [ -f "requirements-server.txt" ]; then
              echo "✅ requirements-server.txt найден"
            else
              echo "❌ requirements-server.txt НЕ НАЙДЕН"
              echo "Содержимое директории:"
              ls -la
              exit 1
            fi

            if [ -f "manage.py" ]; then
              echo "✅ manage.py найден"
            else
              echo "❌ manage.py НЕ НАЙДЕН"
              exit 1
            fi

            # Обновляем зависимости
            echo "=== УСТАНОВКА ЗАВИСИМОСТЕЙ ==="
            pip install -r requirements-server.txt

            # Управление БД
            echo "=== РАБОТА С БАЗОЙ ДАННЫХ ==="
            if [ -f "db.sqlite3" ]; then
              FILE_SIZE=$(stat -f%z "db.sqlite3" 2>/dev/null || stat -c%s "db.sqlite3" 2>/dev/null)
              if [ "$FILE_SIZE" -lt 50000 ]; then
                echo "Удаляем пустую БД из разработки..."
                rm -f db.sqlite3
              else
                echo "Сохраняем существующую БД на сервере (размер: $FILE_SIZE байт)"
              fi
            fi

            # Миграции
            echo "=== ВЫПОЛНЕНИЕ МИГРАЦИЙ ==="
            python manage.py makemigrations
            python manage.py migrate --no-input

            # Сбор статики
            echo "=== СБОР СТАТИЧЕСКИХ ФАЙЛОВ ==="
            python manage.py collectstatic --noinput --clear

            # Проверка результата
            echo "=== ПРОВЕРКА РЕЗУЛЬТАТА ==="
            if [ -d "staticfiles" ]; then
              echo "✅ Папка staticfiles создана"
              echo "Содержимое staticfiles/:"
              ls -la staticfiles/
              echo "Размер папки staticfiles:"
              du -sh staticfiles/
            else
              echo "❌ Папка staticfiles не создана!"
              echo "Проверяем настройки Django:"
              python -c "
              import os
              os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
              from django.conf import settings
              print('DEBUG:', settings.DEBUG)
              print('STATIC_ROOT:', settings.STATIC_ROOT)
              print('STATIC_URL:', settings.STATIC_URL)
              "
            fi

      - name: Restart Gunicorn
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            source ~/myenv/bin/activate
            cd ${{ secrets.PROJECT_PATH }}/LIFTEH_project || exit 1
            export DJANGO_PRODUCTION=true
            export DJANGO_SETTINGS_MODULE=LIFTEH_project.settings
            
            # Ваша существующая логика остановки
            PIDS=$(pgrep -f gunicorn)
            MY_PID=$$
            MY_PPID=$(ps -o ppid= -p $$ | tr -d ' ')
            if [ -n "$PIDS" ]; then
              for pid in $PIDS; do
                if [ "$pid" = "$MY_PID" ] || [ "$pid" = "$MY_PPID" ]; then
                  continue
                fi
                kill "$pid" 2>/dev/null || echo "Процесс $pid уже завершён"
              done
              sleep 2
            fi
            
            # Запускаем в подпроцессе с полным отключением
            (nohup gunicorn --bind 0.0.0.0:8001 --workers 3 --timeout 120 LIFTEH_project.wsgi:application > gunicorn.log 2>&1 &)
            
            sleep 5  # ⬅️ УВЕЛИЧЬТЕ ТАЙМАУТ ДО 5 СЕКУНД
            
            # Более надежная проверка
            echo "Проверка запуска Gunicorn:"
            if pgrep -f "gunicorn.*LIFTEH_project" > /dev/null; then
              echo "✅ Gunicorn успешно запущен"
              echo "Активные процессы:"
              pgrep -af gunicorn
            else
              echo "❌ Gunicorn не запустился"
              echo "Проверьте логи:"
              tail -10 gunicorn.log 2>/dev/null || echo "Логи недоступны"
            fi

      - name: Verify static files
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd "${{ secrets.PROJECT_PATH }}/LIFTEH_project"
            echo "Проверка статических файлов:"
            if [ -d "staticfiles" ]; then
              find staticfiles/ -type f -name "*.css" -o -name "*.js" | head -10
              echo "Размер папки staticfiles:"
              du -sh staticfiles/
            else
              echo "❌ Папка staticfiles не существует!"
              echo "Содержимое текущей директории:"
              ls -la
            fi