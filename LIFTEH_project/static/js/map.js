let map;
let clusterer;
let carPlacemarks = [];
let buildingPlacemarks = [];
let updateInterval;

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
const objectsFilterStates = {
    all: "all",
    without_marks: "without_marks"
};

const transportFilterStates = {
    transport: "transport",
    no_transport: "no_transport"
};

let currentObjectsState = objectsFilterStates.without_marks;
let currentTransportState = transportFilterStates.transport;
let userHasLimitedAccess = false;
let isLoading = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
function checkUserAccess() {
    const hasAccessEntries = document.body.getAttribute('data-has-access-entries') === 'true';
    const isSuperuser = document.body.getAttribute('data-user-is-superuser') === 'true';

    userHasLimitedAccess = (!isSuperuser && hasAccessEntries);

    if (userHasLimitedAccess) {
        const transportSwitch = document.getElementById('transportSwitch');
        const transportSwitchContainer = transportSwitch ? transportSwitch.closest('.filter-switch') : null;

        if (transportSwitchContainer) {
            transportSwitchContainer.style.display = 'none';
            // console.log('Transport switch hidden for user with limited access');
        }

        currentTransportState = transportFilterStates.no_transport;
        if (transportSwitch) {
            transportSwitch.checked = false;
        }
    }
    // console.log(`User access - Limited: ${userHasLimitedAccess}, Superuser: ${isSuperuser}`);
    return userHasLimitedAccess;
}

function initMap() {
    const isLimitedAccess = checkUserAccess();

    if (map) {
        map.destroy();
    }

    map = new ymaps.Map('map', {
        center: [53.9, 27.5],
        zoom: 7
    });

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    // map.controls.remove('zoomControl');
    map.controls.remove('geolocationControl');
    map.controls.remove('searchControl');
    map.controls.remove('typeSelector');
    map.controls.remove('fullscreenControl');
    map.controls.remove('rulerControl');
    map.controls.remove('trafficControl');
    map.controls.remove('routeButtonControl');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–∫—Ä—ã–≤–∞—é—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
    clusterer = new ymaps.Clusterer({
        preset: 'islands#invertedOrangeClusterIcons',
        clusterDisableClickZoom: true,
        clusterOpenBalloonOnClick: true,
        gridSize: 64,
        clusterHideIconOnBalloonOpen: false,
        geoObjectHideIconOnBalloonOpen: false,
        groupByCoordinates: false
    });

    map.geoObjects.add(clusterer);

    loadObjects();
}

function loadObjects() {
    // console.log('=== –ù–ê–ß–ê–õ–û loadObjects ===');
    // console.log('isLoading:', isLoading);
    // console.log('buildingPlacemarks –¥–æ –æ—á–∏—Å—Ç–∫–∏:', buildingPlacemarks.length);
    // console.log('carPlacemarks –¥–æ –æ—á–∏—Å—Ç–∫–∏:', carPlacemarks.length);

    if (clusterer && typeof clusterer.getGeoObjects === 'function') {
        // console.log('clusterer geoObjects –¥–æ –æ—á–∏—Å—Ç–∫–∏:', clusterer.getGeoObjects().length);
    }

    if (isLoading) {
        // console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
        return;
    }

    isLoading = true;
    // console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ = ${currentObjectsState}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ = ${currentTransportState}`);

    clearAllPlacemarks();

    const showTransport = currentTransportState === "transport" && !userHasLimitedAccess;

    loadBuildings(currentObjectsState).then(() => {
        if (showTransport && !userHasLimitedAccess) {
            // console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –æ–±—ä–µ–∫—Ç–æ–≤');
            return loadCars();
        } else {
            // console.log('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–∫—Ä—ã—Ç');
            return Promise.resolve();
        }
    }).then(() => {
        updateMapBounds();
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    }).finally(() => {
        // console.log('buildingPlacemarks –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', buildingPlacemarks.length);
        // console.log('carPlacemarks –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', carPlacemarks.length);
        if (clusterer && typeof clusterer.getGeoObjects === 'function') {
        }
        isLoading = false;
    });
}

function loadBuildings(filterType) {
    return new Promise((resolve, reject) => {
        fetch(`/api/get_objects/?filter=${filterType}`)
            .then(response => {
                if (response.status === 403 || response.status === 401) {
                    window.location.href = '/login/';
                    return reject(new Error('Unauthorized'));
                }
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(objectsData => {
                // console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:', objectsData);
                if (objectsData.error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', objectsData.error);
                    resolve();
                    return;
                }

                const placemarks = [];
                const uniqueAddresses = new Set();
                const uniqueCoords = new Set();

                const customIconSvg = 'data:image/svg+xml;charset=utf-8,' +
                    encodeURIComponent(
                        '<svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="currentColor" class="bi bi-geo-alt-fill" viewBox="0 0 16 16">' +
                        '<path fill="#de4c15" d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10m0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6"/>' +
                        '</svg>'
                    );

                objectsData.forEach(function (obj) {
                    if (obj.latitude && obj.longitude && !uniqueAddresses.has(obj.address)) {
                        const coordKey = `${obj.latitude.toFixed(6)},${obj.longitude.toFixed(6)}`;
                        if (!uniqueCoords.has(coordKey)) {
                            uniqueAddresses.add(obj.address);
                            uniqueCoords.add(coordKey);

                            const placemark = createBuildingPlacemark(obj, customIconSvg);
                            placemarks.push(placemark);
                            buildingPlacemarks.push(placemark);
                        } else {
                            // console.log('üö´ –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', coordKey, obj.address);
                        }
                    }
                });
                // console.log(`üìç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${uniqueCoords.size}`);
                // console.log(`üìç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: ${uniqueAddresses.size}`);
                if (placemarks.length > 0) {
                    clusterer.add(placemarks);
                    // console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${placemarks.length} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä`);

                    setTimeout(() => {
                        if (clusterer && typeof clusterer.getGeoObjects === 'function') {
                            // console.log('üîç –ú–µ—Ç–æ–∫ –≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ç–æ—Ä–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', clusterer.getGeoObjects().length);
                        }
                    }, 100);
                } else {
                    // console.log('‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É');
                }

                resolve();
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
                reject(error);
            });
    });
}

function loadCars() {
    return new Promise((resolve, reject) => {
        if (userHasLimitedAccess) {
            console.log('Skipping car load for user with limited access');
            resolve();
            return;
        }

        fetch('/api/get_tracker_locations/')
            .then(response => {
                if (response.status === 403 || response.status === 401) {
                    window.location.href = '/login/';
                    return reject(new Error('Unauthorized'));
                }
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(trackersData => {
                // console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–æ–≤:', trackersData);

                if (trackersData.error) {
                    // console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤:', trackersData.error);
                    resolve();
                    return;
                }

                const validTrackers = trackersData.filter(tracker =>
                    tracker.latitude && tracker.longitude
                );

                if (validTrackers.length === 0) {
                    // console.log('–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π');
                    resolve();
                    return;
                }
                clearCarPlacemarks();
                validTrackers.forEach(function (tracker) {
                    const placemark = createCarPlacemark(tracker);
                    carPlacemarks.push(placemark);
                    map.geoObjects.add(placemark);
                });

                if (currentTransportState === "transport" && !userHasLimitedAccess) {
                    startAutoUpdate();
                }
                // console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${validTrackers.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É`);
                resolve();
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
                reject(error);
            });
    });
}

// –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ —Å –¥—Ä—É–≥–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
let isFirstLoad = true;
// –§–£–ù–ö–¶–ò–Ø –û–¢–†–ò–°–û–í–ö–ò –û–ë–™–ï–ö–¢–û–í
function updateMapBounds() {
    setTimeout(() => {
        const allPlacemarks = [...buildingPlacemarks, ...carPlacemarks];
        // console.log(`üìç –í—Å–µ–≥–æ –º–µ—Ç–æ–∫ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü: ${allPlacemarks.length}`);

        if (allPlacemarks.length > 0) {
            if (isFirstLoad) {
                // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                calculateBoundsManually();
                isFirstLoad = false;
            } else {
                // –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥
                // console.log('üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã (–Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)');
            }
        } else {
            map.setCenter([53.9, 27.5], 7);
            // console.log('üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            isFirstLoad = true; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –µ—Å–ª–∏ –º–µ—Ç–æ–∫ –Ω–µ—Ç
        }
    }, 500);
}

// –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç –≥—Ä–∞–Ω–∏—Ü
function calculateBoundsManually() {
    const allPlacemarks = [...buildingPlacemarks, ...carPlacemarks];
    const coordinates = [];

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    allPlacemarks.forEach(pm => {
        if (pm && pm.geometry) {
            try {
                const coords = pm.geometry.getCoordinates();
                if (coords && Array.isArray(coords) && coords.length === 2) {
                    coordinates.push(coords);
                }
            } catch (error) {
                // console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Ç–∫–∏:', error);
            }
        }
    });

    if (coordinates.length === 0) {
        // console.log('‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü');
        map.setCenter([53.9, 27.5], 7);
        return;
    }
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    let minLat = coordinates[0][0];
    let maxLat = coordinates[0][0];
    let minLon = coordinates[0][1];
    let maxLon = coordinates[0][1];

    coordinates.forEach(coord => {
        minLat = Math.min(minLat, coord[0]);
        maxLat = Math.max(maxLat, coord[0]);
        minLon = Math.min(minLon, coord[1]);
        maxLon = Math.max(maxLon, coord[1]);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    const latMargin = (maxLat - minLat) * 0.1;
    const lonMargin = (maxLon - minLon) * 0.1;

    const bounds = [
        [minLat - latMargin, minLon - lonMargin],
        [maxLat + latMargin, maxLon + lonMargin]
    ];

    // console.log('üìê –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã:', bounds);

    try {
        map.setBounds(bounds(), { // –ü–†–û–ë–õ–ï–ú–ê –ë–´–õ–ê –¢–£–¢
            checkZoomRange: true,
            zoomMargin: 0
        });
        console.log('‚úÖ –ì—Ä–∞–Ω–∏—Ü—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç');
    } catch (error) {
        // console.log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü:', error);
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        const centerLat = (minLat + maxLat) / 2;
        const centerLon = (minLon + maxLon) / 2;
        map.setCenter([centerLat, centerLon], 7);
        // console.log('üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –º–µ—Ç–æ–∫');
    }
}

function clearAllPlacemarks() {
    if (clusterer && typeof clusterer.removeAll === 'function') {
        clusterer.removeAll();
    }
    clearCarPlacemarks();
    buildingPlacemarks = [];
    setTimeout(() => {
        if (clusterer && typeof clusterer.getGeoObjects === 'function') {
        }
    }, 50);
}

// –ò–ù–ò–¶–ò–ò–†–û–í–ê–ù–ò–ï –û–ß–ò–°–¢–ö–ò –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô
function clearCarPlacemarks() {
    carPlacemarks.forEach(placemark => {
        map.geoObjects.remove(placemark);
    });
    carPlacemarks = [];
}

function createBuildingPlacemark(obj, customIconSvg) {
    const placemark = new ymaps.Placemark(
        [obj.latitude, obj.longitude],
        {
            balloonContent: createBuildingBalloonContent(obj),
            clusterCaption: obj.customer
        },
        {
            iconLayout: 'default#image',
            iconImageHref: customIconSvg,
            iconImageSize: [30, 30],
            iconImageOffset: [-15, -30],
            balloonCloseButton: false,
            hideIconOnBalloonOpen: false
        }
    );
    return placemark;
}

function createCarPlacemark(tracker) {
    const carIconSvg = 'data:image/svg+xml;charset=utf-8,' +
        encodeURIComponent(
            '<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24">' +
            '<path d="M2.52 3.515A2.5 2.5 0 0 1 4.82 2h6.362c1 0 1.904.596 2.298 1.515l.792 1.848c.075.175.21.319.38.404.5.25.855.715.965 1.262l.335 1.679q.05.242.049.49v.413c0 .814-.39 1.543-1 1.997V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.338c-1.292.048-2.745.088-4 .088s-2.708-.04-4-.088V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.892c-.61-.454-1-1.183-1-1.997v-.413a2.5 2.5 0 0 1 .049-.49l.335-1.68c.11-.546.465-1.012.964-1.261a.8.8 0 0 0 .381-.404l.792-1.848ZM3 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2m10 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2M6 8a1 1 0 0 0 0 2h4a1 1 0 1 0 0-2zM2.906 5.189a.51.51 0 0 0 .497.731c.91-.073 3.35-.17 4.597-.17s3.688.097 4.597.17a.51.51 0 0 0 .497-.731l-.956-1.913A.5.5 0 0 0 11.691 3H4.309a.5.5 0 0 0-.447.276L2.906 5.19Z" fill="#de4c15"/>' +
            '</svg>'
        );

    const placemark = new ymaps.Placemark(
        [tracker.latitude, tracker.longitude],
        {
            balloonContent: createCarBalloonContent(tracker),
            hintContent: tracker.car_id
        },
        {
            iconLayout: 'default#image',
            iconImageHref: carIconSvg,
            iconImageSize: [35, 35],
            iconImageOffset: [-10, -20],
            balloonCloseButton: false,
            hideIconOnBalloonOpen: false
        }
    );
    return placemark;
}


function startAutoUpdate() {
    if (updateInterval) {
        clearInterval(updateInterval);
    }

    if (userHasLimitedAccess) {
        return;
    }

    updateInterval = setInterval(() => {
        if (currentTransportState === "transport") {
            fetch('/api/get_tracker_locations/')
                .then(response => response.json())
                .then(trackersData => {
                    if (!trackersData.error) {
                        trackersData.forEach(tracker => {
                            const existingPlacemark = carPlacemarks.find(p =>
                                p.properties.get('balloonContent').includes(tracker.car_id)
                            );
                            if (existingPlacemark && tracker.latitude && tracker.longitude) {
                                existingPlacemark.geometry.setCoordinates([tracker.latitude, tracker.longitude]);
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
                });
        }
    }, 30000);
}

function toggleObjectsFilter() {
    const switchElement = document.getElementById('objectsSwitch');
    const isChecked = switchElement.checked;

    if (isChecked) {
        currentObjectsState = objectsFilterStates.all;
    } else {
        currentObjectsState = objectsFilterStates.without_marks;
    }
    loadObjects();
}

function toggleTransportFilter() {
    if (userHasLimitedAccess) {
        return;
    }

    const switchElement = document.getElementById('transportSwitch');
    const isChecked = switchElement.checked;

    if (!isChecked && updateInterval) {
        clearInterval(updateInterval);
    }

    if (isChecked) {
        currentTransportState = transportFilterStates.transport;
    } else {
        currentTransportState = transportFilterStates.no_transport;
    }
    loadObjects();
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
ymaps.ready(function () {
    initMap();

    document.getElementById('objectsSwitch').addEventListener('change', toggleObjectsFilter);
    document.getElementById('transportSwitch').addEventListener('change', toggleTransportFilter);

    map.events.add('click', function () {
        map.balloon.close();
        if (clusterer.balloon) {
            clusterer.balloon.close();
        }
    });
});
